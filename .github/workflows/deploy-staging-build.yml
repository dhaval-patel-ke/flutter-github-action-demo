name: Deploy Staging Build

on:
  push:
    branches: [ 'main' ]

permissions:
  actions: write
  contents: write

env:
  APK_NAME: "Firebase-Demo.apk"

jobs:
  build-android:
    runs-on: macos-latest
    timeout-minutes: 30
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Setup Environment
        uses: ./.github/actions/setup-environment

      - name: Build Staging APK
        run: flutter build apk --debug

      - name: Rename APK File
        run: mv build/app/outputs/flutter-apk/*.apk ${{ env.APK_NAME }}

      - name: Upload Android Release
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APK_NAME }}
          path: ${{ env.APK_NAME }}
          if-no-files-found: error
          compression-level: 0 # no compression

  # Required because of https://github.com/wzieba/Firebase-Distribution-Github-Action/issues/24
#  firebase-distribution:
#    runs-on: ubuntu-latest
#    timeout-minutes: 30
#    needs: [ build-android ]
#    steps:
#      - name: Checkout Repo
#        uses: actions/checkout@v4
#
#      - name: Display structure of downloaded files
#        run: ls -R
#
#      - name: Download APK artifact
#        uses: actions/download-artifact@v4
#        with:
#          name: ${{ env.APK_NAME }}
#
#      - name: Upload APK artifact to Firebase App Distribution
#        id: firebase-deploy-android
#        uses: wzieba/Firebase-Distribution-Github-Action@v1
#        with:
#          appId: ${{ vars.FIREBASE_ANDROID_APP_ID }}
#          serviceCredentialsFileContent: ${{ secrets.FIREBASE_CREDENTIALS }}
#          groups: kernelequity
#          file: ${{ env.APK_NAME }}

  create-tag:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [ build-android ]
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      #- name: Set tag version
      #  run: echo "VERSION_NAME=${GITHUB_REF##*/}" >> $GITHUB_ENV

      - name: Retrieve version name
        shell: bash
        run: |
          echo "RELEASE_NAME=$(git log -1 --format=%s)" >> $GITHUB_ENV
          cd android
          echo "VERSION_NAME=$(./gradlew -q androidVersionName -PflavorName=production)" >> $GITHUB_ENV
          cd ..

      - name: Retrieve version name
        shell: bash
        run: |
          {
              echo 'RELEASE_BODY_TEMP<<EOF'
              git log -1 --format=%b
              echo EOF
          }
          RELEASE_BODY=$(echo "$RELEASE_BODY_TEMP" | sed 's/\\n/<br>/g') >> "$GITHUB_ENV"

      - name: Create tag
        uses: actions/github-script@v7
        id: create-tag
        with:
          script: |
            const result = await github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'refs/tags/${{env.VERSION_NAME}}',
              sha: context.sha
            })
            const obj = JSON.parse(result)
            console.log(obj.data.url)

#      - name: Create Release
#        uses: actions/github-script@v7
#        id: create-release
#        with:
#          script: |
#            github.rest.repos.createRelease({
#              owner: context.repo.owner,
#              repo: context.repo.repo,
#              name: 'DazzleMe v${{env.VERSION_NAME}}',
#              body: '${{env.RELEASE_BODY}}',
#              tag_name: 'v${{env.VERSION_NAME}}',
#              target_commitish: '${{ github.ref_name }}',
#              draft: false,
#              prerelease: false,
#            })
#