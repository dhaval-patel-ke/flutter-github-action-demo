name: Deploy Staging Build

on:
  push:
    branches: [ 'main' ]

permissions:
  actions: write
  contents: write

env:
  APK_NAME: "Firebase-Demo.apk"
  ANDROID_APP_NAME: "DazzleMe App - Staging"
  ANDROID_APP_BUILD_LINK: "https://appdistribution.firebase.google.com/testerapps/1:470852662413:android:51620a648793ffb67e9ec4"
  RELEASE_NOTE_NAME: "release-note.txt"

jobs:
#  build-android:
#    runs-on: macos-latest
#    timeout-minutes: 30
#    outputs:
#      android-version: ${{ steps.android-version.outputs.VERSION_NAME }}
#    steps:
#      - name: Checkout Repo
#        uses: actions/checkout@v4
#
#      - name: Setup Environment
#        uses: ./.github/actions/setup-environment
#
#      - name: Build Staging APK
#        run: flutter build apk --debug --flavor staging
#
#      - name: Retrieve version name
#        id: android-version
#        shell: bash
#        run: |
#          cd android
#          echo "VERSION_NAME=$(./gradlew -q androidVersionName -PflavorName=staging)" >> $GITHUB_OUTPUT
#          cd ..
#
#      - name: Rename APK File
#        run: mv build/app/outputs/flutter-apk/*.apk ${{ env.APK_NAME }}
#
#      - name: Upload Android Release
#        uses: actions/upload-artifact@v4
#        with:
#          name: ${{ env.APK_NAME }}
#          path: ${{ env.APK_NAME }}
#          if-no-files-found: error
#          compression-level: 0 # no compression

  create-tag:
    runs-on: ubuntu-latest
    timeout-minutes: 30
#    needs: [ build-android ]
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Create GitHub Tag
        uses: ./.github/actions/github-release
        with:
          # required
          app-name: 'DazzleMe'
          create-tag: 'true'
          create-release: 'false'
          version-name: "1.0.0"

#  notify-release:
#    runs-on: ubuntu-latest
#    timeout-minutes: 30
#    needs: [ build-android, create-tag ]
#    steps:
#      - name: Checkout Repo
#        uses: actions/checkout@v4
#
#      - name: Notify release on google chat
#        uses: ./.github/actions/notify-google-chat
#        with:
#          # required
#          app-name: ${{ env.ANDROID_APP_NAME }}
#          app-build-link: ${{ env.ANDROID_APP_BUILD_LINK }}
#          google-chat-webhook: ${{ secrets.GOOGLE_CHAT_WEBHOOK }}
#          version-name: ${{ needs.build-android.outputs.android-version }}
