name: Deploy Staging Build

on:
  push:
    branches: [ 'main' ]

permissions:
  actions: write
  contents: write

env:
  APK_NAME: "Firebase-Demo.apk"
  ANDROID_APP_NAME: "DazzleMe App - Staging"
  ACTIONS_STEP_DEBUG: true
  ANDROID_APP_BUILD_LINK: "https://appdistribution.firebase.google.com/testerapps/1:470852662413:android:51620a648793ffb67e9ec4"

jobs:
#  build-android:
#    runs-on: macos-latest
#    timeout-minutes: 30
#    outputs:
#      android-version: ${{ steps.android-version.outputs.VERSION_NAME }}
#    steps:
#      - name: Checkout Repo
#        uses: actions/checkout@v4

#      - name: Setup Environment
#        uses: ./.github/actions/setup-environment

#      - name: Build Staging APK
#        run: flutter build apk --debug --flavor staging

#      - name: Retrieve version name
#        id: android-version
#        shell: bash
#        run: |
#          cd android
#          echo "VERSION_NAME=$(./gradlew -q androidVersionName -PflavorName=staging)" >> $GITHUB_OUTPUT
#          cd ..

#      - name: Retrieve version name
#        id: android-version
#        shell: bash
#        run: |
#          cd android
#          echo "VERSION_NAME=1.0.1" >> $GITHUB_OUTPUT
#          cd ..

  #      - name: Rename APK File
  #        run: mv build/app/outputs/flutter-apk/*.apk ${{ env.APK_NAME }}
  #
  #      - name: Upload Android Release
  #        uses: actions/upload-artifact@v4
  #        with:
  #          name: ${{ env.APK_NAME }}
  #          path: ${{ env.APK_NAME }}
  #          if-no-files-found: error
  #          compression-level: 0 # no compression


  create-tag:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    #needs: [ build-android ]
    outputs:
      release-note: ${{ steps.release-note.outputs.GIT_COMMIT_SUMMARY }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Retrieve release note
        id: release-note
        shell: bash
        run: |
          {
              echo 'GIT_COMMIT_SUMMARY<<EOF'
              git log -1 --format=%B
              echo EOF
          } >> "$GITHUB_OUTPUT"
          echo "$(echo -n "$GIT_COMMIT_SUMMARY" | base64)" >> release-note-1.txt

      - name: Upload Release note
        uses: actions/upload-artifact@v4
        with:
          name: release-note
          path: '*.txt'

  #      - name: Create tag
#        uses: actions/github-script@v7
#        id: create-tag
#        env:
#          VERSION_NAME: ${{ needs.build-android.outputs.android-version }}
#        with:
#          script: |
#            const result = await github.rest.git.createRef({
#              owner: context.repo.owner,
#              repo: context.repo.repo,
#              ref: 'refs/tags/v${{env.VERSION_NAME}}',
#              sha: context.sha
#            })
#            console.log(result)

  #      - name: Create Release
  #        uses: actions/github-script@v7
  #        id: create-release
  #        with:
  #          script: |
  #            github.rest.repos.createRelease({
  #              owner: context.repo.owner,
  #              repo: context.repo.repo,
  #              name: 'DazzleMe v${{env.VERSION_NAME}}',
  #              body: '${{env.RELEASE_BODY}}',
  #              tag_name: 'v${{env.VERSION_NAME}}',
  #              target_commitish: '${{ github.ref_name }}',
  #              draft: false,
  #              prerelease: false,
  #            })
  #

  notify-release:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    #needs: [ build-android, create-tag ]
    needs: [ create-tag ]
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Retrieve version name
        shell: bash
        env:
          VERSION_NAME: "1.1.1"#"${{ needs.build-android.outputs.android-version }}
          RELEASE_NOTE: ${{ needs.create-tag.outputs.release-note }}
        run: |
          {
              echo 'GIT_COMMIT_SUMMARY<<EOF'
              '*${{ env.ANDROID_APP_NAME }} ðŸš€ðŸš€ðŸš€*'
              '*v${{ env.VERSION_NAME }}* for Android is ready to test. *<${{ env.ANDROID_APP_BUILD_LINK }}|Click Here>* to download!'
              '*GitHub Tag:*\n${{ github.server_url }}/${{ github.repository }}/releases/tag/v${{ env.VERSION_NAME }}'
              '*Release Note:*\n ${{ env.RELEASE_NOTE }}'
          } >> "$GITHUB_ENV"
#          echo "MESSAGE_LINE_1=*${{ env.ANDROID_APP_NAME }} ðŸš€ðŸš€ðŸš€*" >> $GITHUB_ENV
#          echo "MESSAGE_LINE_2=*v${{ env.VERSION_NAME }}* for Android is ready to test. *<${{ env.ANDROID_APP_BUILD_LINK }}|Click Here>* to download!" >> $GITHUB_ENV
#          echo "MESSAGE_LINE_3=*GitHub Tag:*\n${{ github.server_url }}/${{ github.repository }}/releases/tag/v${{ env.VERSION_NAME }}" >> $GITHUB_ENV
#          echo "MESSAGE_LINE_4=*Release Note:*\n ${{ env.RELEASE_NOTE }}" >> $GITHUB_ENV

      - name: Notify release on google chat
        run: |
          curl --location '${{ secrets.GOOGLE_CHAT_WEBHOOK }}' --header 'Content-Type: application/json' --data '{ "text": "${{ env.MESSAGE }}" }'
