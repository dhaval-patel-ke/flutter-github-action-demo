name: Deploy Staging Build

on:
  push:
    branches: [ 'main' ]

permissions:
  actions: write
  contents: write

env:
  APK_NAME: "Firebase-Demo.apk"

jobs:
  build-android:
    runs-on: macos-latest
    timeout-minutes: 30
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

#      - name: Setup Environment
#        uses: ./.github/actions/setup-environment
#
#      - name: Build Staging APK
#        run: flutter build apk --debug --flavor staging
#
#      - name: Rename APK File
#        run: mv build/app/outputs/flutter-apk/*.apk ${{ env.APK_NAME }}
#
#      - name: Upload Android Release
#        uses: actions/upload-artifact@v4
#        with:
#          name: ${{ env.APK_NAME }}
#          path: ${{ env.APK_NAME }}
#          if-no-files-found: error
#          compression-level: 0 # no compression


  create-tag:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [ build-android ]
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Retrieve version name
        shell: bash
        run: |
          cd android
          echo "VERSION_NAME=$(./gradlew -q androidVersionName -PflavorName=staging)" >> $GITHUB_ENV
          cd ..

      - name: Retrieve release note
        shell: bash
        run: |
          {
              echo 'RELEASE_BODY_TEMP<<EOF'
              git log -1 --format=%b
              echo EOF
          }
          RELEASE_BODY=$(echo "$RELEASE_BODY_TEMP" | sed 's/\\n/<br>/g') >> "$GITHUB_ENV"

      - name: Create tag
        uses: actions/github-script@v7
        id: create-tag
        with:
          script: |
            const result = await github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'refs/tags/${{env.VERSION_NAME}}',
              sha: context.sha
            })
            const obj = JSON.parse(result)
            console.log(obj.data.url)

#      - name: Create Release
#        uses: actions/github-script@v7
#        id: create-release
#        with:
#          script: |
#            github.rest.repos.createRelease({
#              owner: context.repo.owner,
#              repo: context.repo.repo,
#              name: 'DazzleMe v${{env.VERSION_NAME}}',
#              body: '${{env.RELEASE_BODY}}',
#              tag_name: 'v${{env.VERSION_NAME}}',
#              target_commitish: '${{ github.ref_name }}',
#              draft: false,
#              prerelease: false,
#            })
#

  notify-release:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [ create-tag ]
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Retrieve version name
        shell: bash
        run: |
          echo "MESSAGE_LINE_1=DazzleMe App - Staging ðŸš€ðŸš€ðŸš€" >> $GITHUB_ENV
          echo "MESSAGE_LINE_2=${{ env.VERSION_NAME }} for Android is ready to test." >> $GITHUB_ENV
          echo "MESSAGE_LINE_3=App Build: https://appdistribution.firebase.google.com/testerapps/1:470852662413:android:51620a648793ffb67e9ec4" >> $GITHUB_ENV
          echo "MESSAGE_LINE_4=GitHub Tag: ${{ github.server_url }}/${{ github.repository }}/tags" >> $GITHUB_ENV
          echo "MESSAGE_LINE_5=Release Note: ${{ env.RELEASE_BODY }}" >> $GITHUB_ENV

      - name: Notify release on google chat
        run: |
          curl --location '${{ secrets.GOOGLE_CHAT_WEBHOOK }}' --header 'Content-Type: application/json' --data '{ "text": "* ${{ env.MESSAGE_LINE_1 }}*\n${{ env.MESSAGE_LINE_2 }} \n${{ env.MESSAGE_LINE_3 }} \n${{ env.MESSAGE_LINE_4 }} \n${{ env.MESSAGE_LINE_5 }}" }'
